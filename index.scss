// development:
// @use "node_modules/@heymarco/sass-string/index" as string;

// production:
@use "../../../node_modules/@heymarco/sass-string/index" as string;



@use "sass:list" as list;



@function wrap-each($selector, $wrap-start, $wrap-end) {
    $bracket: 0;
    $has-comma: true;
    $index: 1;
    $sel-start: null;
    $sel-end: null;
    
    $char: string.slice($selector, string.length($selector));
    $add-terminator: false;
    @if (($char != ",") && ($char != " ")) {
        $selector: $selector + " ";
        $add-terminator: true;
    }

    $wrap-length: string.length($wrap-start) + string.length($wrap-end);

    @while ($index <= string.length($selector)) {
        $char: string.slice($selector, $index, $index);
        
        @if (($char == ",") or ($char == " ")) {
            @if (($bracket == 0) and ($sel-end != null)) {
                $selector:
                    string.slice($selector, 1, $sel-start - 1)
                    +
                    $wrap-start
                    +
                    string.slice($selector, $sel-start, $sel-end)
                    +
                    $wrap-end
                    +
                    string.slice($selector, $sel-end + 1)
                    ;
                
                $sel-start: null;
                $sel-end: null;
                $index: $index + $wrap-length;
            }
        }
        @else {
            @if (($char == "(") or ($char == "{") or ($char == "[")) {
                $bracket: $bracket + 1;
            }
            @else if (($char == ")") or ($char == "}") or ($char == "]")) {
                $bracket: $bracket - 1;

                @if ($bracket == 0) { $sel-end: $index; }
            }
            @else if ($bracket == 0) {
                @if ($sel-start == null) { $sel-start: $index; }
                @else { $sel-end: $index; }
            }
        }

        $index: $index + 1;
    }

    @if ($add-terminator) { @return string.slice($selector, 1, -2); }
    @return $selector;
}

@function make-append($selector) {
    $wrap-start: "&";
    $wrap-end: "";

    @return wrap-each($selector, $wrap-start, $wrap-end);
}

@function make-not($selector, $append: false) {
    $wrap-start: ":not(";
    $wrap-end: ")";
    @if ($append) { $wrap-start: "&" + $wrap-start; }

    @return wrap-each($selector, $wrap-start, $wrap-end);
}



@mixin is($selector) {
    @if (string.not-empty($selector)) { #{$selector} {
        @content;
    }}
    @else {
        @content;
    }
}

@mixin not($selector) {
    @include is(make-not($selector)) {
        @content;
    }
}



@mixin append($selector) {
    @include is(make-append($selector)) {
        @content;
    }
}

@mixin append-not($selector) {
    @include is(make-not($selector, true)) {
        @content;
    }
}



@mixin unify($base-selector, $sub-selector) {
    @if (string.not-empty($base-selector)) {
        @include is($base-selector) { @include append($sub-selector) {
            @content;
        }}
    }
    @else {
        @include is($sub-selector) {
            @content;
        }
    }
}